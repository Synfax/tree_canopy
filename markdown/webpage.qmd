---
title: "Tree Data"
author: "Paul S"
date: "6/6/24"
format: 
  html:
    theme: zephyr
    fig-width: 8
    fig-height: 4
    code-fold: true
    page-layout: full
---
```{r, results='hide', warning=FALSE,message=FALSE}
devtools::install_github("dmurdoch/leaflet@crosstalk4")
library(tidyverse)
library(sf)
library(leaflet)
library(knitr)
library(reactablefmtr)
library(htmltools)
library(crosstalk)
library(DT)

agg_df <- readRDS('../r_objects/agg_df.Rdata')
sa2_sf <- readRDS('../r_objects/sa2_sf.Rdata') %>%
  #rename(sa2_code_2021 = "SA2_CODE21") %>%
  st_set_geometry('geometry')

source('../r_alt/functions.r')
source('../r/mapping_functions.r')
```

## Tree coverage

Insert Lit Review here

``` {r}

trees_per_sa2 <- coverage() %>%
  left_join(sa2_sf, by = 'sa2_code_2021') %>%
  st_set_geometry('geometry') %>%
  dplyr::select(SA2_NAME21, tree_percentage,distance) %>%
  mutate(tree_percentage = round(tree_percentage, 3)) %>%
  as('Spatial')

sa2_distance_map = with(as.data.frame(trees_per_sa2), setNames(distance, SA2_NAME21))
  
#bar chart
sd_map = SharedData$new(trees_per_sa2)
sd_df = SharedData$new(as.data.frame(trees_per_sa2@data), group = sd_map$groupName())

  #mapCoverage(trees_per_sa2_cw, trees_per_sa2_cw$data()$tree_percentage , 'Greens', 'Tree Coverage (%)')

  treePal <- colorNumeric(palette = 'Greens', domain = as.data.frame(sd_df$data())$tree_percentage)
    
  leaflet(sd_map) %>%
    addProviderTiles('CartoDB.Positron') %>%
    addPolygons(fillColor = ~treePal(tree_percentage),
                fillOpacity = 0.5,
                opacity = 0)  %>%
    addLegend(position = "bottomright",
              pal = treePal,
              values = sd_df$data()$tree_percentage,
              title = 'title')
  
  filter_slider("distance", "Distance to CBD", sd_df, ~distance, min = 0, max = 35000, width = '50%')
       
  reactable(sd_df,
  defaultSorted = list('tree_percentage' = "desc"),
  pagination = TRUE,
  theme = sandstone(),
  columns = list(
    tree_percentage = colDef(
      name = 'Tree Coverage (%)',
      cell = data_bars(trees_per_sa2,
                       text_position = "above",
                       fill_color = c("#EDF8E9", "#006D2C"),
                       #fill_gradient = TRUE,
                       #fill_color_ref = viridi(5),
                       background = "lightgrey",
                       max_value = 100,
                       brighten_text = FALSE,
                       bar_height = 20
                       )
    ),
    distance = colDef(show = FALSE)
  )
)



```

## Street Trees

@fig-airquality displays tree coverage over roads by Statistical Area 2

```{r}
#| label: fig-airquality
#| fig-cap: "Tree coverage by SA2"
#| warning: false


street_tree_per_sa2 <- coverage(exp = expression(zone_short == 'roads'), type = 'street', group = 'sa2_name_2021')

reserve_trees_per_sa2 <- coverage(exp = expression(feature_type == 'reserve'), type = 'reserve', group = 'sa2_name_2021') 

resi_trees_per_sa2 <- coverage(exp = expression(zoning_permits_housing == 'Housing permitted'), type = 'residential', group = 'sa2_name_2021') 

#combine into one and clean
combined_df <- street_tree_per_sa2 %>%
  left_join(reserve_trees_per_sa2, by = 'sa2_name_2021') %>%
  left_join(resi_trees_per_sa2, by = 'sa2_name_2021') %>%
  dplyr::select(c('sa2_name_2021','street_percentage', 'reserve_percentage', 'residential_percentage')) %>%
  rowwise() %>%
  mutate(distance = sa2_distance_map[sa2_name_2021]) %>%
  mutate(across(where(is.numeric), ~ round(.x, 1))) %>%
  mutate(across(ends_with('percentage'), ~ ifelse(is.na(.x), 0, .x) )) %>%
  ungroup() %>%
  as.data.frame()

sd_combined = SharedData$new((combined_df))

filter_slider("distance", "Distance to CBD", sd_combined, ~distance, min = 0, max = 35000, width = '50%')
     
```
Note: the table below is sorted by street tree coverage by default. Click other column names to sort them.
```{r}  
#weird bubble plot  
reactable(sd_combined, defaultColDef = colDef(
  cell = bubble_grid(combined_df, shape = 'circles', colors = c("#EDF8E9", "#006D2C")),
  align = 'center',
  vAlign = 'center'),
  columns = list(distance = colDef(show = F),
                 sa2_name_2021 = colDef(name = 'SA2'),
                 street_percentage = colDef(name = 'Streets'),
                 reserve_percentage = colDef(name = 'Parks'),
                 residential_percentage = colDef(name = 'Residential')),
  theme = sandstone(),
  defaultSortOrder = 'desc')

```

## Interactions with Missing Middle

YM recently released Housing Targets, a data-driven model which allocates housing targets by council.

This page calculates how much tree cover might be lost in the upzoning of residential lots, and then calculating how to offset this loss by increasing coverage of street trees
```{r}

years <- 10

targets <- read.csv('../council_targets.csv') [,1:2] %>%
  as.data.frame() %>%
  mutate(Target = sub(',', '', Target))

target_df <- data.frame()

for(lga in targets$LGA) {
  home_target <- (targets %>% filter(LGA == lga))$Target
 
  target_df <<- rbind(target_df, lga_targets(lga, as.numeric(home_target)*years))
}

colnames(target_df) = c('LGA', 'initial_coverage', 'final_coverage')

target_df <- target_df %>%
  rowwise() %>%
  mutate(percentage_point_change = as.numeric(final_coverage) - as.numeric(initial_coverage),
                                  percentage_change = ((as.numeric(final_coverage)/as.numeric(initial_coverage))-1)*100 ) %>%
  arrange(-percentage_change) %>%
  mutate(percentage_change = round(percentage_change, 3))

target_df %>% reactable(theme = sandstone())
```

## Zoning

Zoning is very important

```{r}

coverage(exp = expression(!(zone_short %in% c('roads','other'))),group = 'zone_short') %>%
  
  reactable(
    defaultSorted = list('tree_percentage' = "desc"),
    pagination = TRUE,
    theme = sandstone(),
    columns = list(
    tree_percentage = colDef(
      name = 'Coverage %',
      cell = data_bars(.,
      text_position = "above",
                       fill_color = c("#EDF8E9", "#006D2C"),
                       #fill_gradient = TRUE,
                       #fill_color_ref = viridi(5),
                       background = "lightgrey",
                       max_value = 100,
                       brighten_text = FALSE,
                       bar_height = 20
    )),
    coverage = colDef(show = F),
    total_area = colDef(show = F),
    zone_short = colDef(name = 'Zone type')
  ))


```

## Regressions
aaa
todo: mix with Census data


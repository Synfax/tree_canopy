---
title: "Your suburb's tree canopy"
include-in-header: "header.html"
include-after-body: "footer.html"
---

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: false
#| label: load-_common
source("_common.R")
```


```{r, warning=FALSE, message=FALSE}
#| echo: false
#| label: setup-2
grouping = 'SAL_NAME21'
grouping_sf = sal_sf
pretty_group_name = 'Suburb'


sf_use_s2(FALSE)

melbourne <- st_sfc(st_point(c(144.963115,-37.814175)), crs = 7844)

# random_suburb <- grouping_sf[1:2,] %>% st_centroid() %>% select('centroid') %>% st_as_sfc()
# 
# p = c(melbourne, random_suburb)
# 
# lwgeom::st_geod_azimuth(p,)
# 
# random_suburb <- grouping_sf[1:1,] %>% st_centroid() %>% st_cast('POINT')
# 
# rs <- random_suburb %>%
#   mutate(bearing = c(lwgeom::st_geod_azimuth(.), units::set_units(NA, 'degrees')))

random_suburb <- grouping_sf %>% select('SAL_NAME21', 'geometry', 'distance') %>% st_centroid() %>%
  rowwise() %>%
  mutate(lat = st_coordinates(geometry)[1], lng = st_coordinates(geometry)[2])

# 
# point <- st_sfc(st_point(c(random_suburb$lat[1],random_suburb$lng[1])), crs = 7844)
# g1 <- st_sfc(c( melbourne , point ))

# lwgeom::st_geod_azimuth(g1)


# g4 <- g3 %>% mutate(direction = case_when(
#   bearing > 315 || bearing < 45 ~ "North",
#   bearing > 45 && bearing < 135 ~ "East",
#   bearing > 135 && bearing < 225 ~ "South",
#   bearing > 225 && bearing < 315 ~ "West"
# ))


# directions <- random_suburb %>%
#   rowwise() %>%
#   mutate(pt = st_sfc(st_point(c(lat,lng)), crs = 7844)) %>%
#   mutate(bearing = lwgeom::st_geod_azimuth( st_sfc(c(melbourne, pt)) )) %>%
#   mutate(bearing = as.numeric(units::set_units(bearing, "degrees")) )%>%
#   mutate(bearing = ifelse(bearing < 0, 360 + bearing, bearing)) %>%
#   mutate(direction = case_when(
#     bearing > 0 && bearing < 90 ~ "North East",
#     bearing > 90 && bearing < 180 ~ "South East",
#     bearing > 180 && bearing < 270 ~ "South West",
#     bearing > 270 && bearing < 360 ~ "North West"
#   )) %>%
#   rowwise() %>%
#   mutate(direction = ifelse(distance < 7500, "Inner", direction)) %>%
#   select(SAL_NAME21, direction) %>%
#   st_drop_geometry()

```

```{r, warning = FALSE}
#| echo: false
#| label: full-canopy-map

trees_grouped <- coverage(group = grouping, df = agg_df) %>%
  left_join(grouping_sf, by = (grouping)) %>%
  st_set_geometry('geometry') %>%
  dplyr::select(grouping, tree_percentage,distance, geometry, n) %>%
  filter( n > 10) %>%
  rowwise() %>%
  mutate(tree_percentage = round(tree_percentage, 1)) %>%
  mutate(distance = distance / 1000) %>%
  as('Spatial')

# grouping = 'sa1_code_2021'
# grouping_sf = sa1_sf 
# 
# trees_grouped_sa1 <- coverage(group = grouping) %>%
#   left_join(grouping_sf, by = (grouping)) %>%
#   st_set_geometry('geometry') %>%
#   rowwise() %>%
#   mutate(tree_percentage = round(tree_percentage, 1)) %>%
#   mutate(distance = distance / 1000) %>%
#   filter(n > 10)

grouping = 'SAL_NAME21'
grouping_sf = sal_sf
pretty_group_name = 'Suburb'

#bar chart
sd_map = SharedData$new(trees_grouped)
sd_df = SharedData$new(as.data.frame(trees_grouped@data), group = sd_map$groupName())

  #mapCoverage(trees_per_sa2_cw, trees_per_sa2_cw$data()$tree_percentage , 'Greens', 'Tree Coverage (%)')

  #treePal <- colorNumeric(palette = 'Greens', domain = as.data.frame(sd_df$data())$tree_percentage)
  treePal <- colorNumeric(palette = 'Greens', domain = trees_grouped$tree_percentage)
  
  map <- leaflet(trees_grouped) %>%
    setView(lng = 144.963115, lat = -37.814175, zoom = 11) %>%
    addProviderTiles('CartoDB.Positron') %>%
    addPolygons(fillColor = ~treePal(tree_percentage),
                fillOpacity = 0.5,
                opacity = 0)  %>%
    addLegend(position = "bottomright",
              pal = treePal,
              values = sd_df$data()$tree_percentage,
              title = 'Tree Coverage (%)',
              labFormat = labelFormat(prefix = "", between = "" ))
  
  sf_use_s2(F)
  

  
  map
  
```

# How does your suburb compare?

::: {.callout-tip collapse="true"}
# About the suburbs dataset

There may be inaccuracies in the street coverage data when using Suburbs as a grouping unit, as not all Statistical Area 1s fit uniquely within a suburb. 

SA1s are assigned to the suburb with which they have the highest overlap.
:::

## Total tree canopy coverage
```{r}
#| echo: false  
  
  # filter_slider("distance", "Distance to CBD", sd_df, ~distance, min = 0, max = max(sd_df$data()$distance) + 1, width = '75%')
  
  extra_cols = list()
  extra_cols[[grouping]] <- colDef(name = pretty_group_name, filterable = T)
  
  write_csv(trees_grouped %>% as.data.frame(),'../exports/total_suburb_tree_coverage.csv')
         
  reactable(sd_df,
  defaultSorted = list('tree_percentage' = "desc"),
  pagination = TRUE,
  theme = sandstone(),
  columns = c(list(
    n = colDef(show = F),
    #grouping = colDef(filterable = TRUE),
    tree_percentage = colDef(
      name = 'Tree Coverage (%)',
      cell = data_bars(trees_grouped,
                       text_position = "above",
                       fill_color = c("#EDF8E9", "#006D2C"),
                       #fill_gradient = TRUE,
                       #fill_color_ref = viridi(5),
                       background = "lightgrey",
                       max_value = 100,
                       brighten_text = FALSE,
                       bar_height = 20
                       )
    ),
    distance = colDef(show = FALSE)
  ),extra_cols)
)



```

## Tree canopy coverage by land type

```{r}
#| echo: false
#| label: fig-airquality
#| fig-cap: "Tree coverage by SA2"
#| warning: false

grouping = 'SAL_NAME21'
grouping_sf = sal_sf
pretty_group_name = "Suburb"

public_exp = expression( zone_code %in% c('PPRZ', 'PCRZ') )
street_exp = expression(zone_short == 'roads')
 resi_exp = expression(zone_short %in% c('General residential', 'Greenfield', 'Low density residential', 'Neighbourhood residential', 'Residential growth'))
 
rural_exp = expression(zone_short == "Rural/regional")
 
other_exp = expression( !(zone_short %in% c('General residential', 'Greenfield', 'Low density residential', 'Neighbourhood residential', 'Residential growth', 'roads', 'Rural/regional')) && !(zone_code %in% c('PPRZ', 'PCRZ') ))
  

create_combined_df <- function(grouping, grouping_sf) {
  
  
  street_trees_grouped <- coverage(exp = street_exp, type = 'street', group = grouping, df = agg_df) %>%
  rename("street_tree_coverage" = coverage, "total_street_area" = total_area )

  reserve_trees_grouped <- coverage(exp = public_exp, type = 'reserve', group = grouping, df = agg_df)  %>%
    rename("reserve_tree_coverage" = coverage, "total_reserve_area" = total_area ) 
 
  resi_trees_grouped <- coverage(exp = resi_exp , type = 'residential', group = grouping, df = agg_df)  %>%
    rename("residential_tree_coverage" = coverage, "total_residential_area" = total_area )
  
  rural_trees_grouped <- coverage(exp = rural_exp , type = 'rural', group = grouping, df = agg_df)  %>%
    rename("rural_tree_coverage" = coverage, "total_rural_area" = total_area )
  
  
  other_trees_grouped <- coverage(exp = other_exp, group = grouping, type = 'other', df = agg_df) %>%
    rename('other_tree_coverage' = coverage, 'total_other_area' = total_area)
  
  # street_agg =agg_df %>% filter(eval(street_exp)) %>% filter(lga_name_2022 == 'Banyule')
  # resi_agg= agg_df %>% filter(eval(resi_exp))%>% filter(lga_name_2022 == 'Banyule') 
  # public_agg= agg_df %>% filter(eval(public_exp))%>% filter(lga_name_2022 == 'Banyule')
  # other_agg =agg_df %>% filter(eval(other_exp))%>% filter(lga_name_2022 == 'Manningham')
  
  
  #xzz <- xz %>% left_join(trees_grouped_lga, by = 'lga_name_2022')
  
  # 
  # frame <- bind_rows(
  #   street_agg, resi_agg, public_agg,other_agg
  # )
  # 
  # hasShared = function(df1, df2) {
  #   
  #   df1 = other_agg
  #   df2 = public_agg
  #   
  #   df1n = nrow(df1)
  #   df2n = nrow(df2)
  #   
  #   cmb = bind_rows(df1,df2)
  #   
  #   n_dist_cmb = n_distinct(cmb)
  #   
  #   bl = (n_dist_cmb != (df1n + df2n))
  #   
  #   if(bl) {
  #     
  #   }
  #   
  # }
  # 
 # agg_sf %>% 
 #   group_by(lon, lat) %>%
 #   filter(n() > 1) %>% st_write('fkd.shp')
 # 
 # agg_results %>% group_by(lon, lat) %>%
 #   filter(n() > 1) %>% v()
  
  #combine into one and clean
  combined_df <- street_trees_grouped %>%
    left_join(reserve_trees_grouped, by = grouping) %>%
    left_join(resi_trees_grouped, by = grouping) %>%
    left_join(other_trees_grouped, by = grouping) %>%
    left_join(rural_trees_grouped, by = grouping) %>%
    replace(is.na(.), 0) %>%
    group_by(!!as.name(grouping)) %>%
    mutate(total_area =  sum(across(ends_with('_area'))))  %>%
    mutate(total_coverage_area = sum(across(ends_with('_coverage')))) %>%
    mutate(total_coverage_pc = total_coverage_area / total_area ) %>%
    mutate( weighted_street_pc = (street_tree_coverage / total_coverage_area) * total_coverage_pc,
            weighted_reserve_pc = (reserve_tree_coverage / total_coverage_area) * total_coverage_pc,
            weighted_rural_pc = (rural_tree_coverage / total_coverage_area) * total_coverage_pc,
            weighted_resi_pc = (residential_tree_coverage / total_coverage_area) * total_coverage_pc,
            weighted_other_pc = (other_tree_coverage / total_coverage_area) * total_coverage_pc,
          ) %>%
    dplyr::select(c(grouping,'street_percentage', 'rural_percentage', 'reserve_percentage', 'residential_percentage', 'weighted_street_pc', 'weighted_reserve_pc', 'weighted_rural_pc', 'weighted_resi_pc', 'total_coverage_pc', 'other_percentage', 'weighted_other_pc')) %>%
    left_join(grouping_sf %>% st_drop_geometry() %>% select(grouping, distance), by = grouping) %>%
    rowwise() %>%
    # mutate(distance = distance_map[as.character(as.name(grouping))]) %>%
    mutate(distance = distance / 1000) %>%
    ungroup() %>%
    as.data.frame() %>%
    return()
    # mutate(across(where(is.numeric), ~ round(.x, 1))) %>%
    # mutate(across(ends_with('percentage'), ~ ifelse(is.na(.x), 0, .x) )) %>%
    
}

combined_df = create_combined_df(grouping, grouping_sf)

write_csv(combined_df %>% as.data.frame(),'../exports/suburb_land_use_type_chart.csv')


sd_combined = SharedData$new((combined_df))

```

```{r}
#| echo: false
street_coverage = coverage(exp = street_exp, group = 'SAL_NAME21', type = 'street', df = agg_df) %>%
  arrange(desc(street_percentage)) %>%
  slice_head(n = 10)


#ggplot(street_coverage, mapping = aes(x = SAL_NAME21, y = street_percentage)) + geom_bar(stat = 'identity') + theme_minimal()

grouping = 'SAL_NAME21'
grouping_sf = sal_sf
pretty_group_name = 'Suburb'

extra_cols = list()
extra_cols[[grouping]] <- colDef(name = pretty_group_name, filterable = T)


# slider <- filter_slider("distance", "Distance to CBD", sd_combined, ~distance, min = 0, max = max(sd_combined$data()$distance), width = '75%')
     
#weird bubble plot  
bubble <- reactable(sd_combined,
          defaultSorted = list('street_percentage' = "desc"),
          defaultColDef = colDef(
            show = F,
  cell = bubble_grid(combined_df, shape = 'circles', colors = c("#EDF8E9", "#006D2C")),
  align = 'center',
  vAlign = 'center'),
  columns = c(list(
                 street_percentage = colDef(name = 'Streets', show = T),
                 reserve_percentage = colDef(name = 'Parks', show = T),
                 residential_percentage = colDef(name = 'Residential'), show = T),extra_cols),
  theme = sandstone(),
  defaultSortOrder = 'desc')

#bubble


# Render a bar chart with a label on the left
bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
  bar <- div(style = list(background = fill, width = width, height = height))
  chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = background), bar)
  div(style = list(display = "flex", alignItems = "center"), label, chart)
}

reactable(
  sd_combined,
  defaultSorted = list('street_percentage' = "desc"),
  theme = sandstone(),
  defaultColDef = colDef(show = F),
  columns = list(
    SAL_NAME21 = colDef(show = T, name = 'Suburb', filterable = T),
    street_percentage = colDef(show = T,name = "Street Coverage (%)", align = "left", cell = function(value) {
      width <- paste0(value / max(sd_combined$data()$street_percentage) * 100, "%")
      bar_chart(round(value, 1), width = width, fill = "grey", background = "#e1e1e1")
    }),
    residential_percentage = colDef(show = T, name = "Residential Coverage (%)", align = "left", cell = function(value) {
      width <- paste0(value / max(sd_combined$data()$residential_percentage) * 100, "%")
      bar_chart(round(value, 1), width = width, fill = "#619CFF", background = "#e1e1e1")
    }),
    reserve_percentage = colDef(show = T, name = "Public Coverage (%)", align = "left", cell = function(value) {
      width <- paste0(value / max(sd_combined$data()$reserve_percentage) * 100, "%")
      bar_chart(round(value, 1), width = width, fill = "#7CAE00", background = "#e1e1e1")
    }),
    other_percentage = colDef(show = F, name = "Other Coverage (%)", align = "left", cell = function(value) {
      width <- paste0(value / max(sd_combined$data()$other_percentage) * 100, "%")
      bar_chart(round(value, 1), width = width, fill = "tomato", background = "#e1e1e1")
    })
  )
) 

```

## Total proportion of your suburb made up of streets

```{r}
#| echo: false


grouping = 'SAL_NAME21'
grouping_sf = sal_sf
pretty_group_name = 'Suburb'

streets <- coverage(exp = expression(zone_short == 'roads'), group = grouping, df = agg_df) %>%
  left_join(grouping_sf, by = grouping) %>%
  rowwise() %>%
  mutate(calc_area = st_area(geometry)) %>%
  mutate(street_as_pc_of_total_area = total_area / calc_area) %>%
  st_drop_geometry() %>%
  dplyr::select(grouping, street_as_pc_of_total_area) %>%
  arrange(desc(street_as_pc_of_total_area)) %>%
  mutate(street_as_pc_of_total_area = round(100 * as.vector(street_as_pc_of_total_area), 1))

write_csv(streets %>% as.data.frame() ,'../exports/streets_as_a_pc_of_suburb.csv')

streets %>%
  reactable(
    defaultSorted = list('street_as_pc_of_total_area' = "desc"),
    pagination = T,
    theme = sandstone(),
    columns = list(
    street_as_pc_of_total_area = colDef(
      name = 'Streets as a % of total area',
      cell = data_bars(.,
      text_position = "above",
                       fill_color = c("#EDF8E9", "darkgrey"),
                       #fill_gradient = TRUE,
                       #fill_color_ref = viridi(5),
                       background = "lightgrey",
                       max_value = 50,
                       brighten_text = FALSE,
                       bar_height = 20
    )),
    SAL_NAME21 = colDef(name = 'Suburb', filterable = T)
  ))

```
***

**Next:** [Additional data & analysis](/more-data.html) 